version : '3.4'

services:

  client:
    container_name: client
    build:
      context: ./services/client
      dockerfile: Dockerfile-stage
      args:
        - NODE_ENV=production
        - REACT_APP_USERS_SERVICE_URL=${REACT_APP_USERS_SERVICE_URL}
        - REACT_APP_RECAPTCHA_SITE_KEY=${REACT_APP_RECAPTCHA_SITE_KEY}
        - REQUIRE_RECAPTCHA=false
    expose:
      - 80
    depends_on:
      - users
    links:
      - users

  nginx:
    container_name: nginx
    build:
      context: ./services/nginx
      dockerfile: Dockerfile-stage
    environment:
      - CLEAR_CERTS=0
      - CERT_DOMAIN=${CERT_DOMAIN}
    restart: always
    ports:
      - 80:80
      - 443:443
    depends_on:
      - users
      - client
    volumes:
      - data:/etc/letsencrypt
      - webroot:/var/www/certbot
      - images:/var/www/images

  certbot:
    container_name: certbot
    build:
      context: ./services/certbot
      dockerfile: Dockerfile-stage
    environment:
      - STAGING=1
      - CLEAR_CERTS=0
      - CERT_DOMAIN=${CERT_DOMAIN}
      - CERT_EMAIL=${CERT_EMAIL}
    volumes:
      - data:/etc/letsencrypt
      - webroot:/var/www/certbot
    depends_on:
      - nginx

  users:
    container_name: users
    build:
      context: ./services/users
      dockerfile: Dockerfile-stage
    expose:
      - 5000
    environment:
      - FLASK_DEBUG=0
      - APP_SETTINGS=project.config.StagingConfig
      - DATABASE_URL=postgres://postgres:postgres@users-db:5432/users_stage
      - DATABASE_TEST_URL=postgres://postgres:postgres@users-db:5432/users_test
      - SECRET_KEY=my_precious
      - RECAPTCHA_SECRET_KEY=${RECAPTCHA_SECRET_KEY}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    depends_on:
      - users-db
    links:
      - users-db
    volumes:
      - images:/usr/src/app/images

  users-db:
    container_name: users-db
    build:
      context: ./services/users/project/db
      dockerfile: Dockerfile
    expose:
      - 5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

  swagger:
    container_name: swagger
    build:
      context: ./services/swagger
      dockerfile: Dockerfile-stage
    expose:
      - 8080
    environment:
      - URL=swagger.json
    depends_on:
      - users

volumes:
  data:
  webroot:
  images:
